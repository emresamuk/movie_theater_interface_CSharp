<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>